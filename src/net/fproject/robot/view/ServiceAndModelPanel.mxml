<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="init()" title="Services and Methods"
		 skinClass="net.fproject.robot.view.skin.ServiceAndModelPanelSkin"
		 xmlns:as3syntaxhighlight="net.fproject.as3syntaxhighlight.*">
	<s:states>
		<s:State name="serviceMode" />
		<s:State name="modelMode" />
	</s:states>
	<s:DataGrid height="180" width="250" left="10" top="10" includeIn="serviceMode"
				id="serviceList"
				gridClick="onServiceClick(event)"
				gridItemEditorSessionSave="onEditEnd(event)"
				dataProvider="{serviceInfo.activeProfile.services}" 
				editable="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Services" dataField="name"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:DataGrid height="180" left="268" top="10" right="{argumentsGrid.width + 8}" includeIn="serviceMode"
				id="methodList"
				gridClick="onMethodClick(event)"
				gridItemEditorSessionSave="onEditEnd(event)"
				dataProvider="{activeService.methods}" 
				editable="true"
				showDataTips="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Methods" dataField="name" dataTipFunction="{methodToDataTip}"/>
				<s:GridColumn headerText="Return Type" dataField="returnType" dataTipFunction="{methodToDataTip}"/>
				<s:GridColumn headerText="" editable="false" itemRenderer="net.fproject.robot.view.ShowASDocButton"
							  id="docButtonColumn" dataTipFunction="{methodToDataTip}"
							  width="25"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:DataGrid top="10" id="argumentsGrid"  includeIn="serviceMode"
				dataProvider="{activeMethod.arguments}" right="10" width="386" height="180" editable="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Arguments" dataField="name"/>
				<s:GridColumn headerText="Default Value" dataField="value"/>
				<s:GridColumn headerText="Type" dataField="type">
					<s:itemEditor>
						<fx:Component>
							<s:ComboBoxGridItemEditor dataProvider="{RemoteVariable.allTypes}">
								<fx:Script>
									<![CDATA[
										import net.fproject.robot.model.RemoteVariable;
									]]>
								</fx:Script>
							</s:ComboBoxGridItemEditor>
						</fx:Component>
					</s:itemEditor>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
	<s:Button icon="@Embed(source='assets/add.png')" toolTip="Add service"
			  id="addServiceBtn" left="10" top="201" width="50"
			  click="onAddServiceClick(event)"
			  includeIn="serviceMode"/>
	<s:Button icon="@Embed(source='assets/delete.png')" toolTip="Delete service"
			  id="deleteServiceBtn" left="65" top="201" width="50"
			  enabled="{serviceList.selectedIndex>=0}" click="onDeleteServiceClick(event)"
			  includeIn="serviceMode"/>
	<s:Button x="120" y="201" icon="@Embed(source='assets/cog_add.png')" 
			  id="discoverBtn" width="50" toolTip="Discover AMF endpoint"
			  click="discoverClick(event)"
			  includeIn="serviceMode"/>
	
	<s:Button icon="@Embed(source='assets/add.png')" toolTip="Add method"
			  id="addMethodBtn" left="268" top="200" width="50"
			  enabled="{activeService!=null}" click="onMethodAdd(event)"
			  includeIn="serviceMode"/>
	<s:Button icon="@Embed(source='assets/delete.png')" toolTip="Delete method"
			  id="deleteMethodBtn" left="323" top="200" width="50"
			  enabled="{methodList.selectedIndex>=0}" click="onMethodDelete(event)"
			  includeIn="serviceMode"/>
	
	<s:Button icon="@Embed(source='assets/add.png')" toolTip="Add method argument"
			  id="addArgBtn" right="346" top="201" width="50"
			  enabled="{activeMethod!=null}" click="onArgumentAdd(event)"
			  includeIn="serviceMode"/>
	<s:Button icon="@Embed(source='assets/delete.png')" toolTip="Delete method argument"
			  id="deleteArgBtn" right="291" top="201" width="50"
			  enabled="{argumentsGrid.selectedIndex>=0}" click="onArgumentDelete(event)"
			  includeIn="serviceMode"/>
	
	<s:List height="180" width="250" left="5" top="5" bottom="5" includeIn="modelMode"
				id="modelList" verticalScrollPolicy="auto"
				dataProvider="{serviceInfo.activeProfile.models}" labelField="name"
				click="modelList_clickHandler(event)"/>
	
	<as3syntaxhighlight:AS3CodeViewer id="modelCodeViewer" left="260" top="5" bottom="5" right="5"
									  focusEnabled="false" includeIn="modelMode"
									  fontFamily="Courier New"/>
									  
	<fx:Script>
		<![CDATA[
			import net.fproject.robot.util.ModelCodeBuilder;
			import net.fproject.robot.model.RemoteModel;
				import mx.events.MenuEvent;
				import mx.controls.Menu;
				import mx.core.FlexGlobals;
				import spark.events.GridItemEditorEvent;
				import spark.events.GridEvent;
				import mx.core.IFlexDisplayObject;
				import mx.events.FlexEvent;
				import mx.events.ListEvent;
				import mx.managers.PopUpManager;
				
				import net.fproject.robot.controller.EventHub;
				import net.fproject.robot.events.ProfileModifiedEvent;
				import net.fproject.robot.events.StatusChangeEvent;
				import net.fproject.robot.model.RemoteVariable;
				import net.fproject.robot.model.RemoteMethod;
				import net.fproject.robot.model.RemoteService;
				import net.fproject.robot.model.ServiceInfo;
				
				[Bindable]
				private var serviceInfo:ServiceInfo = ServiceInfo.getInstance();
				private var eventHub:EventHub = EventHub.getInstance();
				
				[Bindable]
				public var activeService:RemoteService;
				[Bindable]
				public var activeMethod:RemoteMethod;
				
				private var discoverPopup:IFlexDisplayObject;
				
				private var dropdownMenu:Menu;
				
				private function init():void
				{
					eventHub.addEventListener(StatusChangeEvent.RESET, onReset);
					eventHub.addEventListener(StatusChangeEvent.CONNECTING, onConnecting);
					dropDownButton.addEventListener(MouseEvent.CLICK, onDropDownClick);
					var dp:XML = 
						<root>
							<menuitem id="services" label="Services and Methods" type="radio" groupName="g" toggled="true"/>
							<menuitem id="models" label="Models" type="radio" groupName="g"/>
						</root>;
					dropdownMenu = Menu.createMenu(this, dp, false);
					dropdownMenu.labelField="@label";
					dropdownMenu.addEventListener(MenuEvent.ITEM_CLICK, menuHandler);
				}
			
			// Event handler for the Menu control's change event.
			private function menuHandler(evt:MenuEvent):void
			{
				this.title = evt.item.@label;
				this.currentState = evt.item.@id == "services" ? "serviceMode" : "modelMode";
				this.dropDownButton.toolTip = "Change to " + (evt.item.@id == "services" ? "Models" : "Services and Methods") + " view";
				if(this.currentState == "modelMode")
				{
					if(modelList != null)
						modelList.selectedItem = null;
					if(modelCodeViewer != null)
						modelCodeViewer.text = null;
				}
					
			}
			
			private function onConnecting(event:StatusChangeEvent):void
			{
				this.activeService = null;
				this.activeMethod = null;
			}
			
			private function onReset(event:StatusChangeEvent):void
			{
				activeMethod = null;
				activeService = null;
			}
			
			private function onDropDownClick(e:MouseEvent):void
			{
				var p:Point = new Point(0,dropDownButton.height);
				p = dropDownButton.localToGlobal(p);
				dropDownButton.callLater(function(x:*,y:*):void{dropdownMenu.show(x, y);},[p.x, p.y]);
			}
			
			private function discoverClick(event:MouseEvent):void
			{
				if(discoverPopup == null)
					discoverPopup = new DiscoverWindow;
				PopUpManager.addPopUp(discoverPopup,FlexGlobals.topLevelApplication as DisplayObject, true);
				PopUpManager.centerPopUp(discoverPopup);
			}
			
			private function onAddServiceClick(event:MouseEvent):void
			{
				var s:RemoteService = new RemoteService();
				serviceInfo.activeProfile.services.addItem(s);
				eventHub.dispatchEvent(new ProfileModifiedEvent(ProfileModifiedEvent.CHANGED));	
			}
			
			private function onDeleteServiceClick(event:MouseEvent):void
			{
				if(serviceList.selectedIndex < 0)
				{
					return;	
				}	
				
				var s:RemoteService = RemoteService(serviceInfo.activeProfile.services.getItemAt(serviceList.selectedIndex));
				serviceInfo.activeProfile.services.removeItemAt(serviceList.selectedIndex);
				if(activeService == s)
				{
					activeService = null;
				}
			}
			
			private function onEditEnd(event:Event):void
			{
				serviceList.callLater(serviceInfo.dataChanged);
			}
			
			private function onServiceClick(event:Event):void
			{
				activeService = RemoteService(serviceList.selectedItem);
			}
			
			private function onMethodAdd(event:MouseEvent):void
			{
				var m:RemoteMethod = new RemoteMethod();
				activeService.methods.addItem(m);
			}
			
			private function onMethodDelete(event:MouseEvent):void
			{
				if(methodList.selectedIndex < 0)
					return;
				
				var m:RemoteMethod = RemoteMethod(activeService.methods.getItemAt(methodList.selectedIndex));
				activeService.methods.removeItemAt(methodList.selectedIndex);
				if(activeMethod == m)
				{
					activeMethod = null;
				}
			}
			
			private function onMethodClick(event:Event):void
			{
				activeMethod = RemoteMethod(methodList.selectedItem);
			}
			
			private function onArgumentClick(event:ListEvent):void
			{
				
			}
			
			private function onArgumentAdd(event:MouseEvent):void
			{
				activeMethod.arguments.addItem(new RemoteVariable());
			}
			
			private function onArgumentDelete(event:MouseEvent):void
			{
				if(argumentsGrid.selectedIndex < 0)
					return;
				activeMethod.arguments.removeItemAt(argumentsGrid.selectedIndex);
			}
			
			protected function methodToDataTip(item:RemoteMethod, column:GridColumn):String
			{
				if(column == docButtonColumn)
					return "Click to view ASDoc...";
				return item.getASDocBody();
			}
			
			[SkinPart]
			public var dropDownButton:Button;
			
			protected function modelList_clickHandler(event:MouseEvent):void
			{
				var selectedModel:RemoteModel = modelList.selectedItem;
				if(selectedModel != null)
				{
					var codeBuilder:ModelCodeBuilder = new ModelCodeBuilder(selectedModel);
					modelCodeViewer.htmlText = codeBuilder.buildPrettyPrint();
				}
			}
			
		]]>
	</fx:Script>		
</s:Panel>
